@page "/lifecycle"
@using System.Threading @*para usar un timer*@

<h1>Lifecycle</h1>
<button class="btn btn-primary" @onclick="StartCountdown">Start Countdown</button>
<br />
Countdown: @Count

<div class="border">
    @*para testear OnParametersSet() y OnParametersSetAsync() le pasamos el counter al child*@
    <LifecycleComponent CountValue="@currentCount" />
</div>

@*recorro los eventos para mostrar el orden*@
@foreach (var item in EventType)
{
    @item
    <hr />
}

<p>Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    //creo una lista para agregar los eventos segun el orden en que son llamados
    List<string> EventType = new List<string>();
    public int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    //agregamos el nombre de los eventos a la lista de eventos para ver cual se agrega primero
    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized() is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync() is called");
        //como es un evento asincrono agregamos retraso y de paso se quita la advertencia
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet() is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync() is called");
        await Task.Delay(1000);
    }

    //como estos eventos son posteriores al render no se van a ver
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //aqui puedo poner logicas en caso de que sea el primer render
        }

        EventType.Add("OnAfterRender() is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync() is called");
        await Task.Delay(1000);
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender() is called");
        return true;
    }

    //iniciar el timer
    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 10000);
    }

    //timer que lo baja e invoca el StateHasChanged
    void TimeCallBack(object state)
    {
        //si Count es mayor que 0 entonces le quitamos 1 y manualmente invocamos StateHasChanged()
        if (Count > 0)
        {
            Count--;
            //si no llamo manualmente el metodo StateHasChanged() entonces no se va a ver el contador
            //este es un escenario en el que este metodo resulta ser util
            InvokeAsync(StateHasChanged);
        }
    }
}