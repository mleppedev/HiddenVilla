@page "/demoHotel"
@using Model

<h3>We will display hotel rooms and amenities here!</h3>
<div class="border p-2 mt-2" style="background-color:azure">
    <h2 class="text-info">Room List [Usando Componentes]</h2>
    <div class="row container">
        <div class="col-12">
            <h4 class="text-info">Hotel Room's</h4>
            <span>Rooms Selected - @SelectedRooms</span>
        </div>
        @foreach (var room in RoomsList)
        {
            //para cada habitacion segun el componente IndividualRoom
            //OnRoomCheckBoxSelection="RoomSelectionCounterChanged" es el parametro que le pasamos al child
            <IndividualRoom OnRoomCheckBoxSelection="RoomSelectionCounterChanged" Room="@room" />
        }

        @*tarea 04 - 05 - hago el recorrido para mostrar todas las comodidades*@
        <div class="col-12">
            <h4 class="text-info">Hotel Amenities [Tarea 04]</h4>
        </div>
        @foreach (var amenity in AmenitiesList)
        {
            //para cada habitacion segun el componente IndividualRoom
            //Tarea 05 - 05 - pasamos el EventCallback
            <IndividualAmenity OnAmenitySelection="AmenitySelectionCounterChanged" Amenity="@amenity" />
        }
    </div>

    @*Tarea 05 - 02 - div para mostrar la comodidad seleccionada*@
    <div class="col-12">
        <p class="text-secondary">Selected Amenity : @SelectedAmenity</p>
    </div>
</div>



@code {
    //creamos esta propiedad para sumar las habitaciones seleccionadas
    public int SelectedRooms { get; set; } = 0;
    //Tarea 05 - 01 - creamos la comodidad que sera mostrada
    public string SelectedAmenity { get; set; } = "";

    List<BlazorRoom> RoomsList = new List<BlazorRoom>();
    //tarea 04 - 02 - se crea la lista de comodidaes
    List<BlazorAmenities> AmenitiesList = new List<BlazorAmenities>();

    //al inicializar crear 2 habitaciones en RoomsList
    protected override void OnInitialized()
    {
        base.OnInitialized();

        RoomsList.Add(new BlazorRoom()
        {
            Id = 1,
            RoomName = "Villa Suite One Bed Room",
            IsActive = true,
            Price = 399,
            RoomProps = new List<BlazorRoomProp>
{
            new BlazorRoomProp{Id=1, Name="Sq Ft", Value="100"},
            new BlazorRoomProp{Id=2, Name="Occupancy", Value="4"},

            }
        });

        RoomsList.Add(new BlazorRoom()
        {
            Id = 201,
            RoomName = "Villa Suite Two Bed Room",
            IsActive = true,
            Price = 699,
            RoomProps = new List<BlazorRoomProp>
{
            new BlazorRoomProp{Id=1, Name="Sq Ft", Value="150"},
            new BlazorRoomProp{Id=2, Name="Occupancy", Value="6"},

            }
        });

        //tarea 04 - 03 - agregamos la lista de 3 comodidades al inicio
        AmenitiesList.Add(new BlazorAmenities { Id = 111, Name = "Gym", Description = "24x7 gym room is available." });
        AmenitiesList.Add(new BlazorAmenities { Id = 222, Name = "Swimming Pool", Description = "Pool room is open from 6am to 10pm." });
        AmenitiesList.Add(new BlazorAmenities { Id = 333, Name = "Free Breakfast", Description = "Enjoy free breakfast at our hotel." });
    }

    //metodo que incrementa o reduce la cantidad de habitaciones seleccionadas
    //boolean flag para ver si la habitacion esta seleccionada o no
    protected void RoomSelectionCounterChanged(bool isRoomSelected)
    {
        if (isRoomSelected)
        {
            SelectedRooms++;
        }
        else
        {
            SelectedRooms--;
        }
    }

    //Tarea 05 - 03 - pasar el valor de la comodidad
    protected void AmenitySelectionCounterChanged(string amenity)
    {
        SelectedAmenity = amenity;
    }
}